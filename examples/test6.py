import numpy as np
import pandas as pd

from pyod.models.hbos2 import HBOS2

scores = [0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 5, 6, 1, 1, 1, 9, 2, 2, 2, 2, 10, 10, 110, 0, 1, 1]
# Mittelwert und Standardabweichung der Normalverteilung
mu = 500  # Mittelwert auf die Mitte des Bereichs von 1 bis 1000 setzen
sigma = 200  # Standardabweichung nach Bedarf anpassen

# Generiere normalverteilte Zahlen
normal_values = np.random.normal(mu, sigma, 1000)

# Skaliere die normalverteilten Zahlen, um sicherzustellen, dass sie im Bereich von 1 bis 1000 liegen
scaled_values = normal_values.clip(1, 1000)

# Runde die normalverteilten und skalierten Zahlen auf ganze Zahlen
rounded_values = np.array(
    [423, 591, 130, 503, 546, 381, 518, 5, 641, 401, 467, 781, 597, 597, 652, 583, 452, 456, 414, 412, 308, 550, 233,
     402, 419, 415, 553, 507, 531, 369, 577, 521, 701, 652, 405, 665, 490, 322, 168, 481, 535, 612, 588, 521, 403, 492,
     809, 888, 565, 614, 831, 333, 407, 128, 430, 749, 595, 438, 536, 404, 737, 492, 308, 42, 807, 323, 478, 341, 354,
     701, 731, 537, 201, 503, 643, 334, 664, 747, 399, 433, 729, 461, 105, 469, 654, 295, 372, 363, 430, 549, 770, 546,
     456, 724, 689, 288, 529, 554, 424, 995, 37, 636, 662, 334, 818, 384, 557, 378, 654, 318, 519, 385, 790, 469, 1,
     354, 1000, 562, 906, 425, 624, 346, 677, 442, 675, 531, 529, 767, 290, 598, 368, 415, 619, 439, 261, 780, 486, 779,
     504, 293, 569, 829, 228, 747, 554, 310, 374, 460, 619, 384, 92, 572, 560, 496, 476, 405, 384, 633, 496, 238, 609,
     666, 635, 622, 603, 540, 606, 545, 327, 539, 112, 483, 808, 318, 661, 705, 261, 375, 737, 274, 699, 689, 532, 129,
     600, 382, 636, 845, 241, 755, 573, 84, 444, 387, 500, 570, 247, 459, 541, 430, 741, 663, 411, 361, 745, 319, 548,
     564, 443, 537, 691, 432, 608, 438, 437, 427, 399, 389, 447, 350, 794, 605, 795, 602, 375, 739, 502, 459, 682, 476,
     424, 733, 485, 640, 1, 698, 462, 360, 507, 519, 592, 858, 452, 562, 264, 508, 451, 669, 1000, 321, 345, 798, 127,
     708, 565, 647, 434, 144, 225, 528, 314, 510, 335, 404, 482, 909, 200, 659, 126, 376, 401, 581, 416, 296, 685, 282,
     532, 509, 198, 1, 769, 672, 314, 309, 875, 715, 202, 250, 392, 920, 416, 66, 407, 143, 921, 607, 578, 950, 128,
     313, 721, 729, 519, 411, 138, 770, 810, 699, 542, 462, 391, 235, 460, 461, 565, 473, 456, 792, 721, 429, 603, 497,
     643, 636, 414, 356, 519, 837, 410, 632, 438, 443, 646, 569, 583, 338, 825, 363, 318, 818, 337, 613, 449, 778,
     200, 168, 409, 250, 679, 123, 668, 536, 566, 608, 792, 542, 695, 563, 797, 302, 679, 351, 713, 542, 510, 825, 359,
     789, 468, 714, 649, 362, 481, 540, 764, 554, 728, 160, 381, 388, 642, 561, 918, 777, 578, 481, 518, 448, 595, 440,
     912, 211, 380, 232, 271, 590, 442, 244, 424, 277, 766, 73, 635, 449, 171, 428, 576, 709, 395, 414, 508, 402, 535,
     600, 302, 566, 531, 618, 948, 262, 54, 556, 756, 397, 526, 841, 1000, 293, 227, 446, 168, 615, 540, 436, 510, 384,
     618, 630, 487, 290, 463, 421, 317, 588, 265, 93, 327, 447, 742, 572, 430, 597, 126, 1000, 572, 145, 352, 593, 402,
     599, 807, 291, 628, 268, 426, 352, 267, 90, 544, 739, 197, 575, 494, 790, 956, 408, 487, 320, 532, 352, 628, 774,
     574, 541, 589, 802, 402, 416, 817, 427, 465, 486, 435, 548, 427, 583, 553, 402, 732, 416, 220, 164, 676, 622, 554,
     412, 543, 556, 375, 530, 695, 339, 763, 560, 723, 595, 646, 630, 330, 494, 684, 319, 306, 846, 593, 346, 583, 678,
     428, 552, 361, 1000, 939, 378, 350, 1000, 348, 614, 325, 681, 312, 252, 749, 948, 567, 774, 236, 721, 334, 337,
     279, 406, 534, 447, 713, 588, 458, 655, 639, 408, 291, 361, 515, 557, 529, 464, 169, 476, 672, 201, 439, 599, 431,
     757, 759, 654, 404, 329, 546, 617, 685, 735, 600, 575, 583, 507, 640, 698, 1000, 538, 576, 149, 392, 516, 548, 294,
     237, 515, 586, 380, 448, 668, 651, 429, 486, 616, 569, 649, 430, 471, 366, 762, 96, 239, 667, 381, 511, 582, 363,
     603, 434, 573, 355, 582, 439, 593, 339, 832, 492, 784, 544, 464, 397, 287, 505, 555, 565, 74, 167, 798, 348, 354,
     567, 583, 104, 11, 344, 431, 955, 846, 554, 876, 509, 739, 513, 627, 343, 367, 295, 205, 442, 684, 752, 1000, 745,
     348, 596, 432, 468, 800, 783, 526, 165, 190, 520, 532, 900, 767, 554, 1, 600, 411, 360, 492, 514, 616, 744, 511,
     368, 442, 395, 419, 795, 483, 566, 362, 756, 225, 349, 614, 413, 544, 392, 307, 909, 356, 654, 803, 456, 771, 51,
     480, 436, 278, 217, 538, 454, 911, 600, 633, 718, 383, 492, 443, 707, 719, 347, 264, 473, 277, 364, 721, 671, 236,
     743, 393, 197, 435, 525, 811, 255, 433, 308, 336, 287, 700, 383, 388, 975, 567, 487, 499, 619, 737, 582, 714, 183,
     324, 650, 515, 287, 172, 475, 431, 448, 490, 549, 415, 793, 279, 495, 510, 693, 890, 575, 678, 573, 329, 614, 684,
     560, 489, 543, 488, 627, 424, 517, 246, 687, 38, 502, 110, 369, 602, 536, 763, 416, 735, 531, 470, 296, 620, 780,
     745, 306, 657, 639, 464, 592, 496, 60, 294, 608, 454, 727, 657, 649, 276, 436, 405, 233, 336, 281, 264, 224, 694,
     274, 566, 600, 731, 351, 578, 636, 322, 468, 362, 662, 355, 254, 427, 54, 846, 237, 393, 404, 528, 380, 620, 67,
     622, 593, 439, 476, 376, 228, 392, 195, 530, 888, 458, 805, 346, 378, 568, 562, 725, 367, 746, 187, 479, 32, 262,
     455, 637, 389, 260, 590, 150, 26, 512, 847, 762, 547, 694, 484, 486, 505, 127, 610, 399, 346, 778, 380, 706, 262,
     689, 273, 485, 217, 628, 476, 522, 833, 725, 304, 480, 347, 142, 597, 606, 400, 248, 763, 577, 207, 851, 651, 463,
     497, 217, 435, 476, 290, 407, 155, 955, 279, 552, 676, 371, 388, 603, 676, 443, 259, 658, 428, 550, 583, 416, 562,
     529, 274, 790, 632, 435, 485, 385, 753, 370, 504, 522, 553, 821, 527, 397, 737, 821, 247, 506, 343, 536, 912, 663,
     516, 392, 746, 611, 438, 613, 247, 537, 713, 543, 479, 498, 183, 70, 402, 492, 885, 525, 569, 770, 452, 834, 656,
     849, 672, 280, 487, 626, 747, 548, 147, 621, 366, 242, 649])
print(sorted(rounded_values))
rounded_values= np.unique(rounded_values)
print(rounded_values[0],"222222222222222222222222222")
rounded_values=np.delete(rounded_values,0)

print(rounded_values[0],"222222222222222222222222222")
a = sorted(range(len(rounded_values)), key=lambda i: rounded_values[i])
b = np.argsort(rounded_values)

c = sorted(range(len(scores)), key=lambda i: scores[i])
d = np.argsort(scores)

print(a[:20], "a")
print(b[:20], "b")

np.array([(1,9),(2,8),(3,7),(4,6),(5,5),(6,4),(7,3),(8,2),(9,1),])

ranked_scores = []

scores_i = scores
sorted_indices = sorted(range(len(rounded_values)), key=lambda i: rounded_values[i])

ranks = np.zeros(len(rounded_values), dtype=int)
current_rank = 1
for idx in sorted_indices:
    ranks[idx] = current_rank
    current_rank += 1
# print(ranks,"with indices")


scores_i = scores
argsort = np.argsort(rounded_values)
ranks2 = np.zeros(len(rounded_values), dtype=int)
current_rank = 1
for ids in argsort:
    ranks2[ids] = current_rank
    current_rank += 1

# print(ranks,"with argsort")

for id in a[:20]:
    print(rounded_values[id])
print("----------------------------------")

for id in b[:20]:
    print(rounded_values[id])

for i in range(20):
    if ranks[i] == ranks2[i]:
        print("true")
    else:
        print("false")
        print(ranks[i], "ranks")
        print(ranks2[i], "ranks2")

clf3=HBOS2()
#clf3.set_mode("dynamic")
clf3.fit(rounded_values,scores)

sorted=sorted(clf3.hbos_scores,reverse=True)
print(sorted)

data, anzahl = np.unique(sorted, return_counts=True)
data=np.array(data)
anzahl= np.array(anzahl)
data= np.sort(data)[::-1]

print(data)
print(anzahl)
